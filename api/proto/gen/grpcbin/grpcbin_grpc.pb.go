// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: grpcbin.proto

package grpcbin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCBinClient is the client API for GRPCBin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCBinClient interface {
	// Echo returns the received message back to the client.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// GetMetadata retrieves the metadata (headers) from
	// the incoming context and returns it.
	GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// StatusCode simulates returning a specific status code.
	// If the status code is an error, it returns an error with that code.
	StatusCode(ctx context.Context, in *StatusCodeRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	// StreamingEcho sends multiple responses back to the client,
	// simulating a server-side streaming RPC.
	StreamingEcho(ctx context.Context, in *StreamingEchoRequest, opts ...grpc.CallOption) (GRPCBin_StreamingEchoClient, error)
	// BidirectionalEcho allows both the client and server to
	// send messages in a bidirectional streaming RPC.
	BidirectionalEcho(ctx context.Context, opts ...grpc.CallOption) (GRPCBin_BidirectionalEchoClient, error)
	// DelayedResponse simulates a delay before returning the response.
	DelayedResponse(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Upload receives a stream of binary data and
	// simulates an upload operation.
	Upload(ctx context.Context, opts ...grpc.CallOption) (GRPCBin_UploadClient, error)
	// Download sends a stream of binary data back to
	// the client, simulating a file download.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (GRPCBin_DownloadClient, error)
	// SimulateError simulates an error based on the request.
	SimulateError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	// Mirror echoes back the received message and metadata.
	Mirror(ctx context.Context, in *MirrorRequest, opts ...grpc.CallOption) (*MirrorResponse, error)
	// Transform  processes the input string according to
	// a specified transformation type (e.g., reversing the string).
	Transform(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error)
	// CompressionTest simulates compression by compressing
	// the data using gzip before returning it.
	CompressionTest(ctx context.Context, in *CompressionRequest, opts ...grpc.CallOption) (*CompressionResponse, error)
}

type gRPCBinClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCBinClient(cc grpc.ClientConnInterface) GRPCBinClient {
	return &gRPCBinClient{cc}
}

func (c *gRPCBinClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) StatusCode(ctx context.Context, in *StatusCodeRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/StatusCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) StreamingEcho(ctx context.Context, in *StreamingEchoRequest, opts ...grpc.CallOption) (GRPCBin_StreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[0], "/grpcbin.GRPCBin/StreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCBinStreamingEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCBin_StreamingEchoClient interface {
	Recv() (*StreamingEchoResponse, error)
	grpc.ClientStream
}

type gRPCBinStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *gRPCBinStreamingEchoClient) Recv() (*StreamingEchoResponse, error) {
	m := new(StreamingEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCBinClient) BidirectionalEcho(ctx context.Context, opts ...grpc.CallOption) (GRPCBin_BidirectionalEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[1], "/grpcbin.GRPCBin/BidirectionalEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCBinBidirectionalEchoClient{stream}
	return x, nil
}

type GRPCBin_BidirectionalEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type gRPCBinBidirectionalEchoClient struct {
	grpc.ClientStream
}

func (x *gRPCBinBidirectionalEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCBinBidirectionalEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCBinClient) DelayedResponse(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/DelayedResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) Upload(ctx context.Context, opts ...grpc.CallOption) (GRPCBin_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[2], "/grpcbin.GRPCBin/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCBinUploadClient{stream}
	return x, nil
}

type GRPCBin_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type gRPCBinUploadClient struct {
	grpc.ClientStream
}

func (x *gRPCBinUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCBinUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCBinClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (GRPCBin_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[3], "/grpcbin.GRPCBin/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCBinDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCBin_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type gRPCBinDownloadClient struct {
	grpc.ClientStream
}

func (x *gRPCBinDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCBinClient) SimulateError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/SimulateError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) Mirror(ctx context.Context, in *MirrorRequest, opts ...grpc.CallOption) (*MirrorResponse, error) {
	out := new(MirrorResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/Mirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) Transform(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error) {
	out := new(TransformResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/Transform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) CompressionTest(ctx context.Context, in *CompressionRequest, opts ...grpc.CallOption) (*CompressionResponse, error) {
	out := new(CompressionResponse)
	err := c.cc.Invoke(ctx, "/grpcbin.GRPCBin/CompressionTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCBinServer is the server API for GRPCBin service.
// All implementations should embed UnimplementedGRPCBinServer
// for forward compatibility
type GRPCBinServer interface {
	// Echo returns the received message back to the client.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// GetMetadata retrieves the metadata (headers) from
	// the incoming context and returns it.
	GetMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// StatusCode simulates returning a specific status code.
	// If the status code is an error, it returns an error with that code.
	StatusCode(context.Context, *StatusCodeRequest) (*StatusCodeResponse, error)
	// StreamingEcho sends multiple responses back to the client,
	// simulating a server-side streaming RPC.
	StreamingEcho(*StreamingEchoRequest, GRPCBin_StreamingEchoServer) error
	// BidirectionalEcho allows both the client and server to
	// send messages in a bidirectional streaming RPC.
	BidirectionalEcho(GRPCBin_BidirectionalEchoServer) error
	// DelayedResponse simulates a delay before returning the response.
	DelayedResponse(context.Context, *DelayRequest) (*EchoResponse, error)
	// Upload receives a stream of binary data and
	// simulates an upload operation.
	Upload(GRPCBin_UploadServer) error
	// Download sends a stream of binary data back to
	// the client, simulating a file download.
	Download(*DownloadRequest, GRPCBin_DownloadServer) error
	// SimulateError simulates an error based on the request.
	SimulateError(context.Context, *ErrorRequest) (*ErrorResponse, error)
	// Mirror echoes back the received message and metadata.
	Mirror(context.Context, *MirrorRequest) (*MirrorResponse, error)
	// Transform  processes the input string according to
	// a specified transformation type (e.g., reversing the string).
	Transform(context.Context, *TransformRequest) (*TransformResponse, error)
	// CompressionTest simulates compression by compressing
	// the data using gzip before returning it.
	CompressionTest(context.Context, *CompressionRequest) (*CompressionResponse, error)
}

// UnimplementedGRPCBinServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCBinServer struct {
}

func (UnimplementedGRPCBinServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedGRPCBinServer) GetMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedGRPCBinServer) StatusCode(context.Context, *StatusCodeRequest) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusCode not implemented")
}
func (UnimplementedGRPCBinServer) StreamingEcho(*StreamingEchoRequest, GRPCBin_StreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingEcho not implemented")
}
func (UnimplementedGRPCBinServer) BidirectionalEcho(GRPCBin_BidirectionalEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalEcho not implemented")
}
func (UnimplementedGRPCBinServer) DelayedResponse(context.Context, *DelayRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelayedResponse not implemented")
}
func (UnimplementedGRPCBinServer) Upload(GRPCBin_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedGRPCBinServer) Download(*DownloadRequest, GRPCBin_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedGRPCBinServer) SimulateError(context.Context, *ErrorRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateError not implemented")
}
func (UnimplementedGRPCBinServer) Mirror(context.Context, *MirrorRequest) (*MirrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mirror not implemented")
}
func (UnimplementedGRPCBinServer) Transform(context.Context, *TransformRequest) (*TransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedGRPCBinServer) CompressionTest(context.Context, *CompressionRequest) (*CompressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressionTest not implemented")
}

// UnsafeGRPCBinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCBinServer will
// result in compilation errors.
type UnsafeGRPCBinServer interface {
	mustEmbedUnimplementedGRPCBinServer()
}

func RegisterGRPCBinServer(s grpc.ServiceRegistrar, srv GRPCBinServer) {
	s.RegisterService(&GRPCBin_ServiceDesc, srv)
}

func _GRPCBin_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).GetMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_StatusCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).StatusCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/StatusCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).StatusCode(ctx, req.(*StatusCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_StreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingEchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCBinServer).StreamingEcho(m, &gRPCBinStreamingEchoServer{stream})
}

type GRPCBin_StreamingEchoServer interface {
	Send(*StreamingEchoResponse) error
	grpc.ServerStream
}

type gRPCBinStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *gRPCBinStreamingEchoServer) Send(m *StreamingEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCBin_BidirectionalEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCBinServer).BidirectionalEcho(&gRPCBinBidirectionalEchoServer{stream})
}

type GRPCBin_BidirectionalEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type gRPCBinBidirectionalEchoServer struct {
	grpc.ServerStream
}

func (x *gRPCBinBidirectionalEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCBinBidirectionalEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCBin_DelayedResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).DelayedResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/DelayedResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).DelayedResponse(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCBinServer).Upload(&gRPCBinUploadServer{stream})
}

type GRPCBin_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type gRPCBinUploadServer struct {
	grpc.ServerStream
}

func (x *gRPCBinUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCBinUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCBin_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCBinServer).Download(m, &gRPCBinDownloadServer{stream})
}

type GRPCBin_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type gRPCBinDownloadServer struct {
	grpc.ServerStream
}

func (x *gRPCBinDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCBin_SimulateError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).SimulateError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/SimulateError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).SimulateError(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_Mirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).Mirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/Mirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).Mirror(ctx, req.(*MirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_Transform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).Transform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/Transform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).Transform(ctx, req.(*TransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_CompressionTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).CompressionTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbin.GRPCBin/CompressionTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).CompressionTest(ctx, req.(*CompressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCBin_ServiceDesc is the grpc.ServiceDesc for GRPCBin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCBin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcbin.GRPCBin",
	HandlerType: (*GRPCBinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GRPCBin_Echo_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _GRPCBin_GetMetadata_Handler,
		},
		{
			MethodName: "StatusCode",
			Handler:    _GRPCBin_StatusCode_Handler,
		},
		{
			MethodName: "DelayedResponse",
			Handler:    _GRPCBin_DelayedResponse_Handler,
		},
		{
			MethodName: "SimulateError",
			Handler:    _GRPCBin_SimulateError_Handler,
		},
		{
			MethodName: "Mirror",
			Handler:    _GRPCBin_Mirror_Handler,
		},
		{
			MethodName: "Transform",
			Handler:    _GRPCBin_Transform_Handler,
		},
		{
			MethodName: "CompressionTest",
			Handler:    _GRPCBin_CompressionTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingEcho",
			Handler:       _GRPCBin_StreamingEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalEcho",
			Handler:       _GRPCBin_BidirectionalEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _GRPCBin_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _GRPCBin_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcbin.proto",
}
